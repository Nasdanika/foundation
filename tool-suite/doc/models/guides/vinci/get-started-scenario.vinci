<?xml version="1.0" encoding="UTF-8"?>
<org.nasdanika.vinci.app:Action xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:org.nasdanika.vinci.app="urn:org.nasdanika.vinci.app" title="" id="f5122c4b-e273-47cf-be23-5676eab8e3df" text="Nasdanika Vinci Guides" pageTemplate="platform:/plugin/org.nasdanika.vinci.templates/pages/default/primary.vinci">
  <elements xsi:type="org.nasdanika.vinci.app:Action" title="Get Started" id="f291b204-e9b7-4d48-99dd-58613843c1ca" text="Get Started" linkedElements="570809bb-5d06-45be-a669-c3984caec4a7 d8927c77-dad4-44e8-9358-b26987aa6ba4 b3ada240-8241-43ec-bcd8-cc9468daadd7 b6158e19-16c5-4e15-a1e7-c06d65defc41 9c0fd82a-fdca-4292-8a43-6dfa751fbe93 c468f498-d114-4b80-a9c3-b57ce1f2c90d e3d38825-1919-46ca-8633-6c9f171a59fd adde8366-045c-45e2-af13-652d1add506a" activator="index.html">
    <elements xsi:type="org.nasdanika.vinci.app:Action" title="Installation" id="d8927c77-dad4-44e8-9358-b26987aa6ba4" text="Installation" markdownContent="The first step is installation of the Nasdanika Tool Suite. &#xD;&#xA;Open your browser, type nasdanika.org in the address bar, and hit enter.&#xD;&#xA;There are several ways to install Nasdanika, we'll use the last one in the list - the JDK bundle.&#xD;&#xA;&#xD;&#xA;Click download, and then extract.&#xD;&#xA;&#xD;&#xA;Open the location where you extracted the files and launch ``eclipse.exe``.&#xD;&#xA;&#xD;&#xA;Select workspace location, you may check &quot;Use this as the default and don't ask again&quot;.&#xD;&#xA;&#xD;&#xA;Once Eclipse opens click on &quot;Workbench&quot;."/>
    <elements xsi:type="org.nasdanika.vinci.app:Action" title="Create a Modeling Project" id="b3ada240-8241-43ec-bcd8-cc9468daadd7" text="Create a Modeling Project" markdownContent="Alright, Eclipse is up and running.&#xD;&#xA;&#xD;&#xA;Before we create a model we need a project to put it in.&#xD;&#xA;&#xD;&#xA;We want to publish our project to GitHub to have a history of our work, collaborate with others, and publish our site to GitHub pages.&#xD;&#xA;So let's create a repository first and then clone it. (Go to GitHub, create, click copy clone URL, go back to Eclipse, open Git Repsitories view and click clone existing repository.&#xD;&#xA;Enter credentials if needed and specify location or accept the default location.&#xD;&#xA;&#xD;&#xA;While vinci models may be stored and edited in any project type, a modeling project provides additional capabilities.&#xD;&#xA;To create a modeling project click File > New > Modeling project. &#xD;&#xA;We will give it the same name as our repository and also will select its location in the repository.&#xD;&#xA;&#xD;&#xA;Now let's push our new files to GitHub and take a look at the repository content in the browser to make sure that everything worked as expected."/>
    <elements xsi:type="org.nasdanika.vinci.app:Action" title="Create a Model" id="b6158e19-16c5-4e15-a1e7-c06d65defc41" text="Create a Model" markdownContent="Now it is time to create our model.&#xD;&#xA;&#xD;&#xA;Right click on the project and select New > Other. Start typing Vinci. Click on the Vinci model and then Next.&#xD;&#xA;&#xD;&#xA;In this tutorial we are taking the shortest path to value and therefore we are going to name our model ``docs``. &#xD;&#xA;The reason for that is that ``docs`` is a reserved name for GitHub Pages and Vinci by default generates to the folder with the same name as the model file without the extension.&#xD;&#xA;&#xD;&#xA;So change &quot;My&quot; to &quot;docs&quot; and click next. &#xD;&#xA;&#xD;&#xA;With Vinci you can model and generate all sort of stuff (open all tree nodes). &#xD;&#xA;&#xD;&#xA;In this tutorial we are going to work at high level of abstraction and create our model in terms of actions. Select &quot;Action&quot; and click next.&#xD;&#xA;On this page we'll leave selections as they are and click Finish.&#xD;&#xA;&#xD;&#xA;Commit, push."/>
    <elements xsi:type="org.nasdanika.vinci.app:Action" title="Populate the Model" id="9c0fd82a-fdca-4292-8a43-6dfa751fbe93" text="Populate the Model" linkedElements="3f8a2b7a-ef31-4f12-9c0e-730611c70907 31eaa218-fad3-422d-9257-3296d4b1e320" markdownContent="By default Vinci creates a tree representation which we may use later. &#xD;&#xA;But right now let's create a mind map diagram because it is more visual.&#xD;&#xA;&#xD;&#xA;Right click on the root node and select New Representation > New Action diagram.&#xD;&#xA;&#xD;&#xA;To start with we'll rename the root node to Joe Doe and set its text to Joe Doe. &#xD;&#xA;We can also set an icon to Joe Doe's avatar. For the sake of this tutorial I'll just use mine from GitHub. I will also set the root activator to none.&#xD;&#xA;&#xD;&#xA;Now we will create an action called &quot;Resume&quot;, set its icon to ``las la-file-alt`` and its activator to ``index.html``.&#xD;&#xA;We will also put some lorem ipsum to the markdown content.&#xD;&#xA;&#xD;&#xA;It all looks like black magic, doesn't it? Tooltips can shed some light on the meaning of the attributes and the model documentation shall provide further clarity.&#xD;&#xA;&#xD;&#xA;You know what, it is time to generate our first site content! Right click on the root diagram node and then click on &quot;Generate Application&quot;. You can see that there is a new folder ``docs`` with &#xD;&#xA;``index.html`` file in it. Let's open this file in a web browser. Not much, but we haven't spent much effort on it either, have we?&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;"/>
    <elements xsi:type="org.nasdanika.vinci.app:Action" title="Overview" id="570809bb-5d06-45be-a669-c3984caec4a7" text="Overview" markdownContent="Hello, this is Pavel Vlasov.&#xD;&#xA;&#xD;&#xA;Welcome to the Nasdanika Vinci Get Started tutorial.&#xD;&#xA;In this tutorial we will create an model of a resume of Joe Doe, a Java developer.  &#xD;&#xA;&#xD;&#xA;We will start with installing the Nasdanika Tool Suite. Then we will create a modeling project and a model. After that we will populate the model.&#xD;&#xA;&#xD;&#xA;We'll be generating a web site from the model as we go, and once finished we'll publish it to [GitHub Pages](https://pages.github.com/).&#xD;&#xA;&#xD;&#xA;Before we proceed I'd like to clarify one thing. With Nasdanika Vinci you can model and generate in a number of different ways. &#xD;&#xA;This goal of this tutorial is to show you one way, the shortest way from an idea in your head to its representation as a web site which you can share with the world.&#xD;&#xA;&#xD;&#xA;So, let's get started, shall we?"/>
    <elements xsi:type="org.nasdanika.vinci.app:Action" title="Generate site with CLI" id="c468f498-d114-4b80-a9c3-b57ce1f2c90d" text="Generate Site with CLI" markdownContent="We already know how to generate HTML from a model using the root action context menu. &#xD;&#xA;&#xD;&#xA;Now I will show you how to perform generation using Nasdanika Command Line interface. &#xD;&#xA;While it requires explicit set up, the command line interface has the following advantages over the context menu:&#xD;&#xA;&#xD;&#xA;* It is more flexible - you can configure output directory and other parameters.&#xD;&#xA;* You do not have to switch between actions in order to generate. It is especially useful when working on multi-model sites where you may work in one model and the root action could be in another model.&#xD;&#xA;* You can use keyboard shortcuts to execute generation - I'll show it to you later.&#xD;&#xA;&#xD;&#xA;We are going to create a launch configuration for generating a Vinci application from a model. Let's open the integrated help and navigate to the topic which explains command line options.&#xD;&#xA;&#xD;&#xA;To create a new launch configuration click Run > Run Configurations. &#xD;&#xA;Right-click on Eclipse Application and select New configuration.&#xD;&#xA;&#xD;&#xA;Select Run an application and then choose ``org.nasdanika.cli.app`` application from the drop-down.&#xD;&#xA;&#xD;&#xA;Go to the arguments and add the arguments as explained in the help. We'll output progress information to doc-progress.txt so it doesn't clutter the console.&#xD;&#xA;&#xD;&#xA;Click Run, then OK (Continue?) in the dependencies dialog. You can see &quot;Exit code: 0&quot; which means success. &#xD;&#xA;Shall you see an exception talking about CDO after that, just ignore it. &#xD;&#xA;&#xD;&#xA;Our new launch configuration can be executed with mouse clicks (show), or using keyboard shortcuts:&#xD;&#xA;&#xD;&#xA;* Alt-shift-R, N&#xD;&#xA;* Start typing the configuration name and once the configuration is selected click enter &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;"/>
    <elements xsi:type="org.nasdanika.vinci.app:Action" title="Summary" id="e3d38825-1919-46ca-8633-6c9f171a59fd" text="Summary" markdownContent="This brings us to the conclusion of this guide in which we:&#xD;&#xA;&#xD;&#xA;* Installed the Nasdanika Tool Suite,&#xD;&#xA;* Created a modeling project and pushed it to GitHub&#xD;&#xA;* Created a model&#xD;&#xA;* Populated the model&#xD;&#xA;* Generated HTML site from the model&#xD;&#xA;* Pushed the site to GitHub and published it to GitHub pages&#xD;&#xA;&#xD;&#xA;Now you "/>
    <elements xsi:type="org.nasdanika.vinci.app:Action" title="Next steps" id="adde8366-045c-45e2-af13-652d1add506a" text="Next steps" markdownContent="Study/explore model documentation, set up automated build with NSD CLI.&#xD;&#xA;&#xD;&#xA;Scenario for this video and turorial was created in Vinci following ... guide (link).&#xD;&#xA;&#xD;&#xA;Thank you for your attention and Happy modeling!"/>
    <elements xsi:type="org.nasdanika.vinci.app:Action" title="Employment history" id="3f8a2b7a-ef31-4f12-9c0e-730611c70907" markdownContent="Let's add employment history as an employer -> position -> project hierarchy. We will create the history under the employment history category. &#xD;&#xA;In order not to clutter the root diagram we'll create a sub-diagram by double-clicking on the employment history category.&#xD;&#xA;&#xD;&#xA;Here we will create several employer actions. Due to a total lack of imagination it will be just Employer 1, 2, and 3. We'll add lorem ipsums to markdown content for employers as well.&#xD;&#xA;&#xD;&#xA;This time we'll generate site content by right-clicking on the root node in the project explorer and selecting &quot;Generate&quot;.&#xD;&#xA;&#xD;&#xA;(click around)&#xD;&#xA;&#xD;&#xA;It is starting to take shape, doesn't it? Let's add a table of contents to the resume page. For this we need to open the tree representation. &#xD;&#xA;Please note that it is a different representation of the same model and we are using this representation because the diagram representation doesn't provide access to all&#xD;&#xA;model features.&#xD;&#xA;&#xD;&#xA;This time we'll generate contents by right-clicking on the root model in the tree representation.&#xD;&#xA;&#xD;&#xA;The table of contents is too close to the text, we need to add some spacing. (add appearance, margin - talk through it).&#xD;&#xA;&#xD;&#xA;It is time to add positions and projects. The same lorem ipsum and lack of creativity in naming - just sequential. (in video show one and then transition to the final state).&#xD;&#xA;&#xD;&#xA;Generate again, ... wait a minute... that nice left navgation panel is gone - it is a navigation tree now. But we liked the panel! Why and what do we do to get the panel back?&#xD;&#xA;The reason for this behavior is the fact that the default action role is Navigation. You can read about the roles in the model documentation. &#xD;&#xA;Right now we will change the roles of positions and projects to Section, which means that they will be generated as sections on the employer pages.&#xD;&#xA;&#xD;&#xA;For demonstration purposed we will set section style to Default for the first employer, to Auto for the second, and to to Card for the third. &#xD;&#xA;You can read about seciton styles and play with other styles on your own.&#xD;&#xA;&#xD;&#xA;Commit, not push."/>
    <elements xsi:type="org.nasdanika.vinci.app:Action" title="Skills" id="31eaa218-fad3-422d-9257-3296d4b1e320" markdownContent="OK, we are done with the employment history, great job. &#xD;&#xA;The next step is to add skills and provide links from projects to skills. &#xD;&#xA;&#xD;&#xA;We will create just one skill and we will do it in the tree representation under the skills category. &#xD;&#xA;&#xD;&#xA;Then we will create an action mapping under the first project and add the mapping tag to the markdown content. &#xD;&#xA;Once again - we are not delving into the details here - please read the documenation.&#xD;&#xA;&#xD;&#xA;Let's generate our final version of the site and publish it. (click through, click on the link from project to skill)&#xD;&#xA;&#xD;&#xA;It all looks good, let's publish. Before we do a quick note on URL's and file names. As you can see we have only one meaningful file name - ``index.html``, which is our entry point &#xD;&#xA;into the resume site. There rest of the file names are meaningless, but unique and we didn't have to do anything about it - Vinci took care of it.&#xD;&#xA;&#xD;&#xA;However, if you'd like to have meaningful url's it is very easy to do so, let's demonstrate it on the Java skill. All we need to do is to specify an activator, something like ``skills/technical/java.html``.&#xD;&#xA;&#xD;&#xA;To demistify what we just did let's first take a look at the hint (show). Now let's assume that it is not clear enough and we want to know more. Open Eclipse help and navigate to the model documentation. We are interested in the &quot;Activator&quot; attribute of &quot;Action&quot;. Let's click on the action. We see that Action inherits activator attribute from ActionBase. So we click on ActionBase - we can do it on the diagram or in the list or supertypes. And then click on activator to navigate to its description.&#xD;&#xA;&#xD;&#xA;First thing to note is that the first sentence in the description is the tooltip we've just seen in the editor. Then we read the rest of documentation and hopefully things become more clear. If they don't - read online about URL and URI resolution.&#xD;&#xA;&#xD;&#xA;Let's get back to our workspace, clear the output directory and generate again. Now we can see skills folder with technical subfolder and java.html in it.&#xD;&#xA;&#xD;&#xA;To publish we commit and push code to GitHub and then go to our repository settings to configure GitHub Pages. All done, click on the link and here we go - Joe Doe's resume is published for the world to see!&#xD;&#xA;"/>
  </elements>
</org.nasdanika.vinci.app:Action>
